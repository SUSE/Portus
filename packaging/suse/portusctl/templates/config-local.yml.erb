# This file has been automatically generated by the portusctl tool during
# the setup of Portus.
#
# Feel free to modify this file, this is not going to be touched by portusctl
# again unless you run `portusctl setup` again.
#
# For more details about this file take a look at: http://port.us.org/docs/Configuring-Portus.html

# Settings for the Portus mailer.
email:
  from: <%= @options["email-from"] %>
  name: <%= @options["email-name"] %>
  reply_to: <%= @options["email-reply-to"] %>

  # If enabled, then SMTP will be used. Otherwise 'sendmail' will be used
  # (defaults to: /usr/sbin/sendmail -i -t).
  smtp:
    enabled: <%= @options["email-smtp-enable"] %>
  <% if @options["email-smtp-enable"] %>
    address: <%= @options["email-smtp-address"] %>
    port: <%= @options["email-smtp-port"] %>
    user_name: <%= @options["email-smtp-username"] %>
    password: <%= @options["email-smtp-password"] %>
    domain: <%= @options["email-smtp-domain"] %>
  <% end %>

# If enabled, then the profile picture will be picked from the Gravatar
# associated with each user. See: https://en.gravatar.com/
gravatar:
  enabled: <%= @options["gravatar-enable"] %>

# Allow admins and owners to delete images and tags. This feature should *only*
# be enabled if the version of the running registry is 2.4 or higher since
# it's the first version that supports garbage collection. That being said,
# Portus will only delete the manifests of the tags and administrators are
# supposed to be responsible for garbage collecting unreferenced blobs. This is
# because the registry 2.4 does not garbage collect automatically. For more
# information on garbage collection on the registry, read the documentation:
# https://github.com/docker/distribution/blob/master/docs/garbage-collection.md
delete:
  enabled: <%= @options["delete-enable"] %>

# LDAP support. If enabled, then only users of the specified LDAP server will
# be able to use Portus.
ldap:
  enabled: <%= @options["ldap-enable"] %>
<% if @options["ldap-enable"] %>

  hostname: <%= @options["ldap-hostname"] %>
  port: <%= @options["ldap-port"] %>

  # Available options: "plain", "simple_tls" and "starttls". The default is
  # "plain", the recommended is "starttls".
  method: <%= @options["ldap-method"] %>

  # The base where users are located (e.g. "ou=users,dc=example,dc=com").
  base: <%= @options["ldap-base"] %>

  # User filter (e.g. "mail=george*").
  filter: <%= @options["ldap-filter"] %>

  # The LDAP attribute where to search for username. The default is 'uid'.
  uid: <%= @options["ldap-uid"] %>

  # LDAP credentials used to search for a user.
  authentication:
    enabled: <%= @options["ldap-authentication-enable"] %>
    <% if @options["ldap-authentication-enable"] %>
    bind_dn: <%= @options["ldap-authentication-bind-dn"] %>
    password: <%= @options["ldap-authentication-password"] %>
    <% end %>

  # Portus needs an email for each user, but there's no standard way to get
  # that from LDAP servers. You can tell Portus how to get the email from users
  # registered in the LDAP server with this configurable value. There are three
  # possibilities:
  #
  #   - disabled: this is the default value. It means that Portus won't do a
  #     thing when registering LDAP users (users will be redirected to their
  #     profile page until they setup an email account).
  #   - enabled where "attr" is empty: for this you need "ldap.base" to have
  #     some value. In this case, the hostname will be guessed from the domain
  #     component of the provided base string. For example, for the dn:
  #     "ou=users,dc=example,dc=com", and a user name "user", the resulting
  #     email is "user@example.com".
  #   - enabled where "attr" is not empty: with this you specify the attribute
  #     inside a LDIF record where the email is set.
  #
  # If something goes wrong when trying to guess the email, then it just falls
  # back to the default behavior (empty email).
  guess_email:
    enabled: <%= @options["ldap-guess-email-enable"] %>
    attr: <%= @options["ldap-guess-email-attr"] %>
<% end %>

# Set first_user_admin to true if you want that the first user that signs up
# to be an admin.
#
# Set to false otherwise. Then you will need to run
#   rake portus:make_admin[USERNAME]
# in order to set the admin user
first_user_admin:
  enabled: <%= @options["first-user-admin-enable"] %>

# If enabled, then users can signup with the signup form. Otherwise, the admin
# is responsible of creating new users by either:
#   - Using the "portus:create_user" rake task.
#   - Using the form available in the admin panel.
# This is ignored if LDAP is enabled.
signup:
  enabled: <%= @options["signup-enable"] %>

# By default require ssl to be enabled when running on production
check_ssl_usage:
  enabled: <%= @options["secure"] %>

# Contains advanced options that tweak how Portus interacts with the
# Registry. Don't touch any of these values unless you *really* know what you
# are doing.
registry:
  # Set the expiration time in minutes for the JWT Token that Portus uses to
  # authenticate with the registry.
  #
  # Note that this is just a work-around on the fact that the registry does not
  # try to get a new token again after the current one has expired. Once a
  # solution is issued upstream, we can deprecate this option.
  #
  # See: https://github.com/SUSE/Portus/issues/510
  jwt_expiration_time:
    value: <%= @options["jwt-expiration-time"] %>

  # Set the pagination value for API calls that fetch data from the
  # registry. You can read more about pagination in the registry here:
  #   https://github.com/docker/distribution/blob/master/docs/spec/api.md#pagination
  catalog_page:
    value: <%= @options["catalog-page"] %>

# The FQDN of the machine where Portus is being deployed.
machine_fqdn:
  value: <%= HOSTNAME %>
